#!/usr/bin/env sh

# Request and keep the administrator password active.
sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

OMC_REPO_NAME="oh-my-config"
OMC_CONFIG_DIR="$HOME/.$OMC_REPO_NAME"

say() {
  printf '%s: %s\n' "$OMC_REPO_NAME" "$1"
}

err() {
    say "$1" >&2
    exit 1
}

check_xcode_select() {
  if xcode-select -p &>/dev/null; then
    say "Xcode Command Line Tools are already installed."
    return
  fi

  say "Xcode Command Line Tools not found. Installing..."
  xcode-select --install

  until xcode-select -p &>/dev/null; do
      sleep 5
  done

  say "Xcode Command Line Tools installed successfully."
}

check_config_repository() {
  local github_username="ymokry"
  local repo_https_url="https://github.com/$github_username/$OMC_REPO_NAME.git"
  local repo_ssh_url="git@github.com:$github_username/$OMC_REPO_NAME.git"

  if [ -d "$OMC_CONFIG_DIR" ]; then
    say "$OMC_CONFIG_DIR is already initialized."
    return
  fi

  say "$OMC_CONFIG_DIR does not exist. Cloning the GitHub repository..."
  git clone "$repo_https_url" "$OMC_CONFIG_DIR"

  if [ $? -ne 0 ]; then
    err "Failed to clone the repository."
  fi

  say "Repository cloned successfully into $OMC_CONFIG_DIR."

  say "Changing the remote URL from HTTPS to SSH..."
  cd "$OMC_CONFIG_DIR" || { err "Failed to change directory to $OMC_CONFIG_DIR"; }
  git remote set-url origin "$repo_ssh_url"

  if [ $? -eq 0 ]; then
    say "Remote URL successfully changed to SSH."
  else
    err "Failed to change the remote URL."
  fi
}

check_nix() {
  if command -v nix &>/dev/null; then
    say "Nix is already installed."
    return
  fi

  say "Nix not found. Installing..."
  curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install

  if [ $? -eq 0 ]; then
    say "Nix installed successfully."
  else
    err "Failed to install Nix."
  fi
}

check_omc() {
  local link_name="omc"
  local bin_dir="/usr/local/bin"

  if [ -e "$bin_dir/$link_name" ]; then
    say "A command named '$link_name' already exists in $bin_dir."
    return
  fi

  say "Creating symbolic link for the script as '$link_name' in $bin_dir..."
  sudo ln -s "$OMC_CONFIG_DIR/bin/$link_name" "$bin_dir/$link_name"
  
  if [ $? -eq 0 ]; then
    say "Symbolic link created successfully."
  else
    err "Failed to create the symbolic link."
  fi
}

case "$1" in
  prepare)
    say "Preparing Oh My Config..."
    check_xcode_select
    check_config_repository
    check_nix
    check_omc
    say "Oh My Config preparation completed."
    ;;
  *)
    say "Usage: $0 {prepare|install}"
    ;;
esac
